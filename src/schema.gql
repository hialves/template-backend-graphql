# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: Float!
  createdAt: String!
  updatedAt: String!
  password: String!
  email: String!
  role: Role!
}

enum Role {
  SuperAdmin
  Admin
  Customer
  Manager
}

type DefaultResult {
  success: Boolean!
  message: String!
}

type DeleteResult {
  success: Boolean!
  message: String!
}

type ValidationKey {
  key: String!
  message: String!
}

type Asset {
  id: Float!
  createdAt: String!
  updatedAt: String!
  filename: String!
  source: String!
  mimeType: String!
}

type Admin {
  id: Float!
  createdAt: String!
  updatedAt: String!
  name: String!
  assetId: Float
  asset: Asset
  userId: Float
  user: User
}

type Customer {
  id: Float!
  createdAt: String!
  updatedAt: String!
  name: String!
  phone: String
  assetId: Float
  asset: Asset
  userId: Float
  user: User
}

type Query {
  admins: [Admin!]!
  admin(id: Float!): Admin!
  users: [User!]!
  user(id: Int!): User!
  customers: [Customer!]!
  customer(id: Float!): Customer!
  me: Profile!
}

union Profile = Admin | Customer

type Mutation {
  createAdmin(input: CreateAdminInput!): CreateAdminResult!
  updateAdmin(input: UpdateAdminInput!): Admin!
  removeAdmin(id: Float!): DeleteResult!
  createUser(input: CreateUserInput!): User!
  deleteUser(id: Int!): User!
  updateUser(email: String!, id: Int!): User!
  login(input: LoginInput!): DefaultResult!
  logout: DefaultResult!
  createCustomer(input: CreateCustomerInput!): Customer!
  updateCustomer(input: UpdateCustomerInput!): Customer!
  removeCustomer(id: Float!): DeleteResult!
}

union CreateAdminResult = Admin | ValidationError

type ValidationError {
  errors: [ValidationKey!]!
  message: String!
}

input CreateAdminInput {
  name: String!
  email: String!
  password: String!
}

input UpdateAdminInput {
  name: String
  email: String
  password: String
  id: Float!
}

input CreateUserInput {
  email: String!
  password: String!
  role: Role!
}

input LoginInput {
  email: String!
  password: String!
  device: String
}

input CreateCustomerInput {
  name: String!
  email: String!
  password: String!
  cardToken: String
  phone: String
}

input UpdateCustomerInput {
  name: String
  email: String
  password: String
  cardToken: String
  phone: String
  id: Float!
}